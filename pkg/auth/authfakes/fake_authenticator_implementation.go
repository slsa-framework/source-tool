// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"context"
	"sync"
	"time"

	"github.com/slsa-framework/source-tool/pkg/auth"
)

type FakeAuthenticatorImplementation struct {
	checkTokenStatusStub        func(context.Context, string) (string, error)
	checkTokenStatusMutex       sync.RWMutex
	checkTokenStatusArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	checkTokenStatusReturns struct {
		result1 string
		result2 error
	}
	checkTokenStatusReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	openBrowserStub        func(string) error
	openBrowserMutex       sync.RWMutex
	openBrowserArgsForCall []struct {
		arg1 string
	}
	openBrowserReturns struct {
		result1 error
	}
	openBrowserReturnsOnCall map[int]struct {
		result1 error
	}
	persistTokenStub        func(string) error
	persistTokenMutex       sync.RWMutex
	persistTokenArgsForCall []struct {
		arg1 string
	}
	persistTokenReturns struct {
		result1 error
	}
	persistTokenReturnsOnCall map[int]struct {
		result1 error
	}
	pollForTokenStub        func(context.Context, string, time.Duration) (string, error)
	pollForTokenMutex       sync.RWMutex
	pollForTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	pollForTokenReturns struct {
		result1 string
		result2 error
	}
	pollForTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	readTokenStub        func() (string, error)
	readTokenMutex       sync.RWMutex
	readTokenArgsForCall []struct {
	}
	readTokenReturns struct {
		result1 string
		result2 error
	}
	readTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	requestDeviceCodeStub        func(context.Context) (*auth.DeviceCodeResponse, error)
	requestDeviceCodeMutex       sync.RWMutex
	requestDeviceCodeArgsForCall []struct {
		arg1 context.Context
	}
	requestDeviceCodeReturns struct {
		result1 *auth.DeviceCodeResponse
		result2 error
	}
	requestDeviceCodeReturnsOnCall map[int]struct {
		result1 *auth.DeviceCodeResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthenticatorImplementation) checkTokenStatus(arg1 context.Context, arg2 string) (string, error) {
	fake.checkTokenStatusMutex.Lock()
	ret, specificReturn := fake.checkTokenStatusReturnsOnCall[len(fake.checkTokenStatusArgsForCall)]
	fake.checkTokenStatusArgsForCall = append(fake.checkTokenStatusArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.checkTokenStatusStub
	fakeReturns := fake.checkTokenStatusReturns
	fake.recordInvocation("checkTokenStatus", []interface{}{arg1, arg2})
	fake.checkTokenStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthenticatorImplementation) CheckTokenStatusCallCount() int {
	fake.checkTokenStatusMutex.RLock()
	defer fake.checkTokenStatusMutex.RUnlock()
	return len(fake.checkTokenStatusArgsForCall)
}

func (fake *FakeAuthenticatorImplementation) CheckTokenStatusCalls(stub func(context.Context, string) (string, error)) {
	fake.checkTokenStatusMutex.Lock()
	defer fake.checkTokenStatusMutex.Unlock()
	fake.checkTokenStatusStub = stub
}

func (fake *FakeAuthenticatorImplementation) CheckTokenStatusArgsForCall(i int) (context.Context, string) {
	fake.checkTokenStatusMutex.RLock()
	defer fake.checkTokenStatusMutex.RUnlock()
	argsForCall := fake.checkTokenStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthenticatorImplementation) CheckTokenStatusReturns(result1 string, result2 error) {
	fake.checkTokenStatusMutex.Lock()
	defer fake.checkTokenStatusMutex.Unlock()
	fake.checkTokenStatusStub = nil
	fake.checkTokenStatusReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) CheckTokenStatusReturnsOnCall(i int, result1 string, result2 error) {
	fake.checkTokenStatusMutex.Lock()
	defer fake.checkTokenStatusMutex.Unlock()
	fake.checkTokenStatusStub = nil
	if fake.checkTokenStatusReturnsOnCall == nil {
		fake.checkTokenStatusReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.checkTokenStatusReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) openBrowser(arg1 string) error {
	fake.openBrowserMutex.Lock()
	ret, specificReturn := fake.openBrowserReturnsOnCall[len(fake.openBrowserArgsForCall)]
	fake.openBrowserArgsForCall = append(fake.openBrowserArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.openBrowserStub
	fakeReturns := fake.openBrowserReturns
	fake.recordInvocation("openBrowser", []interface{}{arg1})
	fake.openBrowserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthenticatorImplementation) OpenBrowserCallCount() int {
	fake.openBrowserMutex.RLock()
	defer fake.openBrowserMutex.RUnlock()
	return len(fake.openBrowserArgsForCall)
}

func (fake *FakeAuthenticatorImplementation) OpenBrowserCalls(stub func(string) error) {
	fake.openBrowserMutex.Lock()
	defer fake.openBrowserMutex.Unlock()
	fake.openBrowserStub = stub
}

func (fake *FakeAuthenticatorImplementation) OpenBrowserArgsForCall(i int) string {
	fake.openBrowserMutex.RLock()
	defer fake.openBrowserMutex.RUnlock()
	argsForCall := fake.openBrowserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthenticatorImplementation) OpenBrowserReturns(result1 error) {
	fake.openBrowserMutex.Lock()
	defer fake.openBrowserMutex.Unlock()
	fake.openBrowserStub = nil
	fake.openBrowserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticatorImplementation) OpenBrowserReturnsOnCall(i int, result1 error) {
	fake.openBrowserMutex.Lock()
	defer fake.openBrowserMutex.Unlock()
	fake.openBrowserStub = nil
	if fake.openBrowserReturnsOnCall == nil {
		fake.openBrowserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.openBrowserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticatorImplementation) persistToken(arg1 string) error {
	fake.persistTokenMutex.Lock()
	ret, specificReturn := fake.persistTokenReturnsOnCall[len(fake.persistTokenArgsForCall)]
	fake.persistTokenArgsForCall = append(fake.persistTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.persistTokenStub
	fakeReturns := fake.persistTokenReturns
	fake.recordInvocation("persistToken", []interface{}{arg1})
	fake.persistTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthenticatorImplementation) PersistTokenCallCount() int {
	fake.persistTokenMutex.RLock()
	defer fake.persistTokenMutex.RUnlock()
	return len(fake.persistTokenArgsForCall)
}

func (fake *FakeAuthenticatorImplementation) PersistTokenCalls(stub func(string) error) {
	fake.persistTokenMutex.Lock()
	defer fake.persistTokenMutex.Unlock()
	fake.persistTokenStub = stub
}

func (fake *FakeAuthenticatorImplementation) PersistTokenArgsForCall(i int) string {
	fake.persistTokenMutex.RLock()
	defer fake.persistTokenMutex.RUnlock()
	argsForCall := fake.persistTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthenticatorImplementation) PersistTokenReturns(result1 error) {
	fake.persistTokenMutex.Lock()
	defer fake.persistTokenMutex.Unlock()
	fake.persistTokenStub = nil
	fake.persistTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticatorImplementation) PersistTokenReturnsOnCall(i int, result1 error) {
	fake.persistTokenMutex.Lock()
	defer fake.persistTokenMutex.Unlock()
	fake.persistTokenStub = nil
	if fake.persistTokenReturnsOnCall == nil {
		fake.persistTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.persistTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticatorImplementation) pollForToken(arg1 context.Context, arg2 string, arg3 time.Duration) (string, error) {
	fake.pollForTokenMutex.Lock()
	ret, specificReturn := fake.pollForTokenReturnsOnCall[len(fake.pollForTokenArgsForCall)]
	fake.pollForTokenArgsForCall = append(fake.pollForTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.pollForTokenStub
	fakeReturns := fake.pollForTokenReturns
	fake.recordInvocation("pollForToken", []interface{}{arg1, arg2, arg3})
	fake.pollForTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthenticatorImplementation) PollForTokenCallCount() int {
	fake.pollForTokenMutex.RLock()
	defer fake.pollForTokenMutex.RUnlock()
	return len(fake.pollForTokenArgsForCall)
}

func (fake *FakeAuthenticatorImplementation) PollForTokenCalls(stub func(context.Context, string, time.Duration) (string, error)) {
	fake.pollForTokenMutex.Lock()
	defer fake.pollForTokenMutex.Unlock()
	fake.pollForTokenStub = stub
}

func (fake *FakeAuthenticatorImplementation) PollForTokenArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.pollForTokenMutex.RLock()
	defer fake.pollForTokenMutex.RUnlock()
	argsForCall := fake.pollForTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthenticatorImplementation) PollForTokenReturns(result1 string, result2 error) {
	fake.pollForTokenMutex.Lock()
	defer fake.pollForTokenMutex.Unlock()
	fake.pollForTokenStub = nil
	fake.pollForTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) PollForTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.pollForTokenMutex.Lock()
	defer fake.pollForTokenMutex.Unlock()
	fake.pollForTokenStub = nil
	if fake.pollForTokenReturnsOnCall == nil {
		fake.pollForTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.pollForTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) readToken() (string, error) {
	fake.readTokenMutex.Lock()
	ret, specificReturn := fake.readTokenReturnsOnCall[len(fake.readTokenArgsForCall)]
	fake.readTokenArgsForCall = append(fake.readTokenArgsForCall, struct {
	}{})
	stub := fake.readTokenStub
	fakeReturns := fake.readTokenReturns
	fake.recordInvocation("readToken", []interface{}{})
	fake.readTokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthenticatorImplementation) ReadTokenCallCount() int {
	fake.readTokenMutex.RLock()
	defer fake.readTokenMutex.RUnlock()
	return len(fake.readTokenArgsForCall)
}

func (fake *FakeAuthenticatorImplementation) ReadTokenCalls(stub func() (string, error)) {
	fake.readTokenMutex.Lock()
	defer fake.readTokenMutex.Unlock()
	fake.readTokenStub = stub
}

func (fake *FakeAuthenticatorImplementation) ReadTokenReturns(result1 string, result2 error) {
	fake.readTokenMutex.Lock()
	defer fake.readTokenMutex.Unlock()
	fake.readTokenStub = nil
	fake.readTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) ReadTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.readTokenMutex.Lock()
	defer fake.readTokenMutex.Unlock()
	fake.readTokenStub = nil
	if fake.readTokenReturnsOnCall == nil {
		fake.readTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.readTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) requestDeviceCode(arg1 context.Context) (*auth.DeviceCodeResponse, error) {
	fake.requestDeviceCodeMutex.Lock()
	ret, specificReturn := fake.requestDeviceCodeReturnsOnCall[len(fake.requestDeviceCodeArgsForCall)]
	fake.requestDeviceCodeArgsForCall = append(fake.requestDeviceCodeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.requestDeviceCodeStub
	fakeReturns := fake.requestDeviceCodeReturns
	fake.recordInvocation("requestDeviceCode", []interface{}{arg1})
	fake.requestDeviceCodeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthenticatorImplementation) RequestDeviceCodeCallCount() int {
	fake.requestDeviceCodeMutex.RLock()
	defer fake.requestDeviceCodeMutex.RUnlock()
	return len(fake.requestDeviceCodeArgsForCall)
}

func (fake *FakeAuthenticatorImplementation) RequestDeviceCodeCalls(stub func(context.Context) (*auth.DeviceCodeResponse, error)) {
	fake.requestDeviceCodeMutex.Lock()
	defer fake.requestDeviceCodeMutex.Unlock()
	fake.requestDeviceCodeStub = stub
}

func (fake *FakeAuthenticatorImplementation) RequestDeviceCodeArgsForCall(i int) context.Context {
	fake.requestDeviceCodeMutex.RLock()
	defer fake.requestDeviceCodeMutex.RUnlock()
	argsForCall := fake.requestDeviceCodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthenticatorImplementation) RequestDeviceCodeReturns(result1 *auth.DeviceCodeResponse, result2 error) {
	fake.requestDeviceCodeMutex.Lock()
	defer fake.requestDeviceCodeMutex.Unlock()
	fake.requestDeviceCodeStub = nil
	fake.requestDeviceCodeReturns = struct {
		result1 *auth.DeviceCodeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) RequestDeviceCodeReturnsOnCall(i int, result1 *auth.DeviceCodeResponse, result2 error) {
	fake.requestDeviceCodeMutex.Lock()
	defer fake.requestDeviceCodeMutex.Unlock()
	fake.requestDeviceCodeStub = nil
	if fake.requestDeviceCodeReturnsOnCall == nil {
		fake.requestDeviceCodeReturnsOnCall = make(map[int]struct {
			result1 *auth.DeviceCodeResponse
			result2 error
		})
	}
	fake.requestDeviceCodeReturnsOnCall[i] = struct {
		result1 *auth.DeviceCodeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticatorImplementation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthenticatorImplementation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
