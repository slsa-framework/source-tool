// SPDX-FileCopyrightText: Copyright 2025 The SLSA Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: policy.proto

package policy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The repository policy definition
type RepoPolicy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CanonicalRepo     string                 `protobuf:"bytes,1,opt,name=canonical_repo,proto3" json:"canonical_repo,omitempty"`
	ProtectedBranches []*ProtectedBranch     `protobuf:"bytes,2,rep,name=protected_branches,proto3" json:"protected_branches,omitempty"`
	ProtectedTag      *ProtectedTag          `protobuf:"bytes,3,opt,name=protected_tag,json=protectedTag,proto3,oneof" json:"protected_tag,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RepoPolicy) Reset() {
	*x = RepoPolicy{}
	mi := &file_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoPolicy) ProtoMessage() {}

func (x *RepoPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoPolicy.ProtoReflect.Descriptor instead.
func (*RepoPolicy) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

func (x *RepoPolicy) GetCanonicalRepo() string {
	if x != nil {
		return x.CanonicalRepo
	}
	return ""
}

func (x *RepoPolicy) GetProtectedBranches() []*ProtectedBranch {
	if x != nil {
		return x.ProtectedBranches
	}
	return nil
}

func (x *RepoPolicy) GetProtectedTag() *ProtectedTag {
	if x != nil {
		return x.ProtectedTag
	}
	return nil
}

// When a branch requires multiple controls, they must all be enabled
// at or before 'since'.
type ProtectedBranch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Since *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	// We override this string with slsa.SlsaSourceLevel
	TargetSlsaSourceLevel  string                   `protobuf:"bytes,3,opt,name=target_slsa_source_level,json=targetSlsaSourceLevel,proto3" json:"target_slsa_source_level,omitempty"`
	RequireReview          bool                     `protobuf:"varint,4,opt,name=require_review,json=requireReview,proto3" json:"require_review,omitempty"`
	OrgStatusCheckControls []*OrgStatusCheckControl `protobuf:"bytes,5,rep,name=org_status_check_controls,proto3" json:"org_status_check_controls,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtectedBranch) Reset() {
	*x = ProtectedBranch{}
	mi := &file_policy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtectedBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedBranch) ProtoMessage() {}

func (x *ProtectedBranch) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedBranch.ProtoReflect.Descriptor instead.
func (*ProtectedBranch) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{1}
}

func (x *ProtectedBranch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtectedBranch) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *ProtectedBranch) GetTargetSlsaSourceLevel() string {
	if x != nil {
		return x.TargetSlsaSourceLevel
	}
	return ""
}

func (x *ProtectedBranch) GetRequireReview() bool {
	if x != nil {
		return x.RequireReview
	}
	return false
}

func (x *ProtectedBranch) GetOrgStatusCheckControls() []*OrgStatusCheckControl {
	if x != nil {
		return x.OrgStatusCheckControls
	}
	return nil
}

// The controls required for protected tags.
type ProtectedTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Since         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	TagHygiene    bool                   `protobuf:"varint,2,opt,name=tag_hygiene,json=tagHygiene,proto3" json:"tag_hygiene,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtectedTag) Reset() {
	*x = ProtectedTag{}
	mi := &file_policy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtectedTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedTag) ProtoMessage() {}

func (x *ProtectedTag) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedTag.ProtoReflect.Descriptor instead.
func (*ProtectedTag) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{2}
}

func (x *ProtectedTag) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *ProtectedTag) GetTagHygiene() bool {
	if x != nil {
		return x.TagHygiene
	}
	return false
}

// Used by orgs to require that specific 'checks' are run on protected
// branches and to associate those checks with a control name to include
// in provenance and VSAs.
// https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/available-rules-for-rulesets#require-status-checks-to-pass-before-merging
type OrgStatusCheckControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The property to record in the VSA if the conditions are met.
	// MUST start with `ORG_SOURCE_`.
	// We'll overide this with slsa.ControlName
	PropertyName string `protobuf:"bytes,1,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	// These controls have their own start time to enable orgs to enable
	// new ones without violating continuity on other controls.
	Since *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	// The name of the 'Status Check' as reported in the GitHub UI & API.
	CheckName     string `protobuf:"bytes,3,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrgStatusCheckControl) Reset() {
	*x = OrgStatusCheckControl{}
	mi := &file_policy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgStatusCheckControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgStatusCheckControl) ProtoMessage() {}

func (x *OrgStatusCheckControl) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgStatusCheckControl.ProtoReflect.Descriptor instead.
func (*OrgStatusCheckControl) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{3}
}

func (x *OrgStatusCheckControl) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *OrgStatusCheckControl) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *OrgStatusCheckControl) GetCheckName() string {
	if x != nil {
		return x.CheckName
	}
	return ""
}

var File_policy_proto protoreflect.FileDescriptor

const file_policy_proto_rawDesc = "" +
	"\n" +
	"\fpolicy.proto\x123in_toto_attestation.predicates.source_provenance.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa9\x02\n" +
	"\n" +
	"RepoPolicy\x12&\n" +
	"\x0ecanonical_repo\x18\x01 \x01(\tR\x0ecanonical_repo\x12t\n" +
	"\x12protected_branches\x18\x02 \x03(\v2D.in_toto_attestation.predicates.source_provenance.v1.ProtectedBranchR\x12protected_branches\x12k\n" +
	"\rprotected_tag\x18\x03 \x01(\v2A.in_toto_attestation.predicates.source_provenance.v1.ProtectedTagH\x00R\fprotectedTag\x88\x01\x01B\x10\n" +
	"\x0e_protected_tag\"\xc2\x02\n" +
	"\x0fProtectedBranch\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x120\n" +
	"\x05since\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05since\x127\n" +
	"\x18target_slsa_source_level\x18\x03 \x01(\tR\x15targetSlsaSourceLevel\x12%\n" +
	"\x0erequire_review\x18\x04 \x01(\bR\rrequireReview\x12\x88\x01\n" +
	"\x19org_status_check_controls\x18\x05 \x03(\v2J.in_toto_attestation.predicates.source_provenance.v1.OrgStatusCheckControlR\x19org_status_check_controls\"a\n" +
	"\fProtectedTag\x120\n" +
	"\x05since\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x05since\x12\x1f\n" +
	"\vtag_hygiene\x18\x02 \x01(\bR\n" +
	"tagHygiene\"\x8d\x01\n" +
	"\x15OrgStatusCheckControl\x12#\n" +
	"\rproperty_name\x18\x01 \x01(\tR\fpropertyName\x120\n" +
	"\x05since\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05since\x12\x1d\n" +
	"\n" +
	"check_name\x18\x03 \x01(\tR\tcheckNameB\xdb\x02\n" +
	"7com.in_toto_attestation.predicates.source_provenance.v1B\vPolicyProtoP\x01Z0github.com/slsa-framework/source-tool/pkg/policy\xa2\x02\x03IPS\xaa\x020InTotoAttestation.Predicates.SourceProvenance.V1\xca\x020InTotoAttestation\\Predicates\\SourceProvenance\\V1\xe2\x02<InTotoAttestation\\Predicates\\SourceProvenance\\V1\\GPBMetadata\xea\x023InTotoAttestation::Predicates::SourceProvenance::V1b\x06proto3"

var (
	file_policy_proto_rawDescOnce sync.Once
	file_policy_proto_rawDescData []byte
)

func file_policy_proto_rawDescGZIP() []byte {
	file_policy_proto_rawDescOnce.Do(func() {
		file_policy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_policy_proto_rawDesc), len(file_policy_proto_rawDesc)))
	})
	return file_policy_proto_rawDescData
}

var file_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_policy_proto_goTypes = []any{
	(*RepoPolicy)(nil),            // 0: in_toto_attestation.predicates.source_provenance.v1.RepoPolicy
	(*ProtectedBranch)(nil),       // 1: in_toto_attestation.predicates.source_provenance.v1.ProtectedBranch
	(*ProtectedTag)(nil),          // 2: in_toto_attestation.predicates.source_provenance.v1.ProtectedTag
	(*OrgStatusCheckControl)(nil), // 3: in_toto_attestation.predicates.source_provenance.v1.OrgStatusCheckControl
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_policy_proto_depIdxs = []int32{
	1, // 0: in_toto_attestation.predicates.source_provenance.v1.RepoPolicy.protected_branches:type_name -> in_toto_attestation.predicates.source_provenance.v1.ProtectedBranch
	2, // 1: in_toto_attestation.predicates.source_provenance.v1.RepoPolicy.protected_tag:type_name -> in_toto_attestation.predicates.source_provenance.v1.ProtectedTag
	4, // 2: in_toto_attestation.predicates.source_provenance.v1.ProtectedBranch.since:type_name -> google.protobuf.Timestamp
	3, // 3: in_toto_attestation.predicates.source_provenance.v1.ProtectedBranch.org_status_check_controls:type_name -> in_toto_attestation.predicates.source_provenance.v1.OrgStatusCheckControl
	4, // 4: in_toto_attestation.predicates.source_provenance.v1.ProtectedTag.since:type_name -> google.protobuf.Timestamp
	4, // 5: in_toto_attestation.predicates.source_provenance.v1.OrgStatusCheckControl.since:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_policy_proto_init() }
func file_policy_proto_init() {
	if File_policy_proto != nil {
		return
	}
	file_policy_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_policy_proto_rawDesc), len(file_policy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_policy_proto_goTypes,
		DependencyIndexes: file_policy_proto_depIdxs,
		MessageInfos:      file_policy_proto_msgTypes,
	}.Build()
	File_policy_proto = out.File
	file_policy_proto_goTypes = nil
	file_policy_proto_depIdxs = nil
}
